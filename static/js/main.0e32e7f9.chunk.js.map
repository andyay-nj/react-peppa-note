{"version":3,"sources":["image/peppa/peppa6.png","image/peppa/peppa7.jpg","components/Header/index.js","components/ListItem/index.js","components/List/index.js","components/Note/index.js","util.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Header","this","props","onAddNote","onDeleteNote","className","onClick","src","peppa6","React","Component","ListItem","active","id","title","contents","List","notes","activeId","onListItemClick","map","item","key","Note","theNote","onEditNote","value","onChange","e","generateId","Math","random","toString","substr","App","state","handleListItemClick","setState","handelEditNote","type","find","target","handleAddNote","handleDeleteNote","filter","length","activeNote","peppa7","Boolean","window","location","hostname","match","ReactDDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e32e7f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/peppa6.a8004c86.png\";","module.exports = __webpack_public_path__ + \"static/media/peppa7.a9bd1d16.jpg\";","import React from 'react';\nimport './index.css';\n// import peppa7 from '../../image/peppa/peppa7.jpg';\nimport peppa6 from '../../image/peppa/peppa6.png';\n\nclass Header extends React.Component {\n    render() {\n        const { onAddNote, onDeleteNote } = this.props;\n        return (\n            <div className=\"header\">\n                <div className=\"header-title\">\n                    <div className=\"header-text\">\n                        <span>Peppa note</span>\n                    </div>\n                </div>\n                <div className=\"header-buttons\">\n                    <button className=\"header-add\" onClick={onAddNote}>\n                        <img className=\"header-image\" src={peppa6}></img>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './index.css';\n\nclass ListItem extends React.Component {\n    render() {\n\t\tconst { id, active, title, contents, onClick } = this.props;\n\t\t\n        return (\n            <div\n                className={active ? \"list-item active\" : \"list-item\"}\n                onClick={onClick}\n            >\n                <div className=\"list-title\">{title ? title : '제목'}</div>\n                <div className=\"list-contents\">{contents ? contents : '내용'}</div>\n            </div>\n        );\n    }\n}\n\nexport default ListItem;","import React from 'react';\nimport './index.css';\nimport ListItem from '../ListItem';\n\nclass List extends React.Component {\n    render() {\n        const { \n            notes,\n            activeId,\n            onListItemClick\n        } = this.props;\n        \n        return (\n            <div className=\"list\">\n                {notes.map((item) => {\n                    const { id, title, contents } = item;\n                    return (\n                        <ListItem\n                            key={id}\n                            id={id}\n                            active={id === activeId}\n                            title={title}\n                            contents={contents}\n                            onClick={() => {onListItemClick(id)}}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nexport default List;","import React from 'react';\nimport './index.css';\n\nclass Note extends React.Component {\n    render() {\n        const { theNote, onEditNote } = this.props;\n        const { title, contents } = theNote;\n        return (\n            <div className=\"note\">\n                <div className=\"note-wrapper\">\n                    <input \n                        className=\"note-title\"\n                        value={title}\n                        onChange={(e) => onEditNote('title', e)} />\n                    <textarea\n                        className=\"note-contents\"\n                        value={contents}\n                        onChange={(e) => onEditNote('contents', e)}></textarea>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Note;","export const generateId = () => {\n    return '_' + Math.random().toString(36).substr(2, 9);\n}","import React from 'react';\nimport './index.css';\nimport Header from '../Header';\nimport List from '../List';\nimport Note from '../Note';\nimport { generateId } from '../../util';\nimport peppa7 from '../../image/peppa/peppa7.jpg';\n\nclass App extends React.Component {\n  state = {\n    notes: [\n      {id:'_dsafd111', title:'제목1',contents:'내용1'},\n      {id:'_dsafd222', title:'제목2',contents:'내용2'},\n      {id:'_dsafd333', title:'제목3',contents:'내용3'},\n    ],\n    activeId: '_dsafd222',\n  }\n\n  handleListItemClick = (id) => {\n    this.setState({activeId: id});\n\t}\n\n\thandelEditNote = (type, e) => {\n\t\tconst notes = [...this.state.notes];\n\t\tconst theNote = notes.find((item) => item.id === this.state.activeId);\n\t\ttheNote[type] = e.target.value;\n\t\tthis.setState({\n\t\t\tnotes,\n\t\t})\n\t}\n  \n  handleAddNote = () => {\n    const id = generateId();\n    this.setState({\n      notes: [\n        ...this.state.notes,\n        {\n          id,\n          title: '제목',\n          contents: '내용',\n        },\n      ],\n      activeId: id,\n    });\n  }\n  \n  handleDeleteNote = () => {\n    const notes = this.state.notes.filter((item) => item.id !== this.state.activeId);\n\n    this.setState({\n      notes,\n      activeId: notes.length === 0 ? null : notes[0].id,\n    })\n  }\n\n  render() {\n\t\tconst { notes, activeId } = this.state;\n\t\tconst activeNote = notes.filter((item) => item.id === activeId)[0];\n        return (\n          <div className=\"app\">\n            <Header\n              onAddNote={this.handleAddNote}\n              onDeleteNote={this.handleDeleteNote}\n            />\n            <div className=\"app-container\">\n              <List \n                notes={notes}\n                activeId={activeId}\n                onListItemClick={this.handleListItemClick} />\n              {\n                notes.length !== 0 &&\n                <Note theNote={activeNote} onEditNote={this.handelEditNote} />\n              }\n            </div>\n            <div className=\"app-remove\" onClick={this.handleDeleteNote}>\n                <img className=\"app-remove-icon\" src={peppa7}></img>\n            </div>\n          </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDDOM from 'react-dom';\nimport './global.css';\nimport App from './components/App';\nimport { unregister } from './serviceWorker';\n\nReactDDOM.render(<App />, document.getElementById('root'));\nunregister();"],"sourceRoot":""}